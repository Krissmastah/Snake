/// <reference types="node" />
import * as hrana from "@libsql/hrana-client";
import type { Config, Client, Transaction, ResultSet, InStatement } from "./api.js";
import type { ExpandedConfig } from "./config.js";
import { Lru } from "./lru.js";
export * from "./api.js";
export declare function createClient(config: Config): HranaClient;
/** @private */
export declare function _createClient(config: ExpandedConfig): HranaClient;
interface ConnState {
    client: hrana.Client;
    useSqlCache: boolean | undefined;
    sqlCache: Lru<string, hrana.Sql>;
    openTime: Date;
    streamStates: Set<StreamState>;
}
interface StreamState {
    conn: ConnState;
    stream: hrana.Stream;
}
export declare class HranaClient implements Client {
    #private;
    closed: boolean;
    /** @private */
    constructor(client: hrana.Client, url: URL, authToken: string | undefined);
    execute(stmt: InStatement): Promise<ResultSet>;
    batch(stmts: Array<InStatement>): Promise<Array<ResultSet>>;
    transaction(): Promise<HranaTransaction>;
    _closeStream(streamState: StreamState): void;
    close(): void;
}
export declare class HranaTransaction implements Transaction {
    #private;
    /** @private */
    constructor(client: HranaClient, state: StreamState);
    execute(stmt: InStatement): Promise<ResultSet>;
    rollback(): Promise<void>;
    commit(): Promise<void>;
    close(): void;
    get closed(): boolean;
}
export declare function stmtToHrana(stmt: InStatement): hrana.Stmt;
export declare function resultSetFromHrana(hranaRows: hrana.RowsResult): ResultSet;
export declare function mapHranaError(e: unknown): unknown;
