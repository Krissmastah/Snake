"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.valueFromProto = exports.protoNull = exports.valueToProto = void 0;
const js_base64_1 = require("js-base64");
const errors_js_1 = require("./errors.js");
function valueToProto(value) {
    if (value === null) {
        return exports.protoNull;
    }
    else if (typeof value === "string") {
        return { "type": "text", "value": value };
    }
    else if (typeof value === "number") {
        if (!Number.isFinite(value)) {
            throw new errors_js_1.ClientError("Only finite numbers (not Infinity or NaN) can be passed as arguments");
        }
        return { "type": "float", "value": +value };
    }
    else if (typeof value === "bigint") {
        return { "type": "text", "value": "" + value };
    }
    else if (typeof value === "boolean") {
        return { "type": "integer", "value": value ? "1" : "0" };
    }
    else if (value instanceof ArrayBuffer) {
        return { "type": "blob", "base64": js_base64_1.Base64.fromUint8Array(new Uint8Array(value)) };
    }
    else if (value instanceof Uint8Array) {
        return { "type": "blob", "base64": js_base64_1.Base64.fromUint8Array(value) };
    }
    else if (value instanceof Date) {
        return { "type": "float", "value": value.valueOf() };
    }
    else if (typeof value === "object") {
        return { "type": "text", "value": value.toString() };
    }
    else {
        throw new TypeError("Unsupported type of value");
    }
}
exports.valueToProto = valueToProto;
exports.protoNull = { "type": "null" };
function valueFromProto(value) {
    if (value["type"] === "null") {
        return null;
    }
    else if (value["type"] === "integer") {
        const int = parseInt(value["value"], 10);
        if (!Number.isSafeInteger(int)) {
            throw new RangeError(`Received integer ${value["value"]} which cannot be ` +
                "safely represented as a JavaScript number");
        }
        return int;
    }
    else if (value["type"] === "float") {
        return value["value"];
    }
    else if (value["type"] === "text") {
        return value["value"];
    }
    else if (value["type"] === "blob") {
        return js_base64_1.Base64.toUint8Array(value["base64"]).buffer;
    }
    else {
        throw new errors_js_1.ProtoError("Unexpected value type");
    }
}
exports.valueFromProto = valueFromProto;
