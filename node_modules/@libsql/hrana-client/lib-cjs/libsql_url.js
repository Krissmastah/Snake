"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLibsqlUrl = void 0;
const errors_js_1 = require("./errors.js");
/** Parses a URL compatible with the libsql client (`@libsql/client`). This URL may have the "libsql:" scheme
 * and may contain query parameters. */
function parseLibsqlUrl(urlStr) {
    const url = new URL(urlStr);
    let authToken = undefined;
    for (const [key, value] of url.searchParams.entries()) {
        if (key === "authToken") {
            authToken = value;
        }
        else {
            throw new errors_js_1.LibsqlUrlParseError(`Unknown URL query argument ${JSON.stringify(key)}`);
        }
    }
    let hranaScheme;
    if (url.protocol === "http:") {
        throw new errors_js_1.LibsqlUrlParseError('This client does not support "http:" URLs. Please use a "ws:" URL instead.');
    }
    else if (url.protocol === "https:") {
        throw new errors_js_1.LibsqlUrlParseError('This client does not support "https:" URLs. Please use a "wss:" URL instead.');
    }
    else if (url.protocol === "libsql:") {
        hranaScheme = "wss:";
    }
    else if (url.protocol === "ws:" || url.protocol === "wss:") {
        hranaScheme = url.protocol;
    }
    else {
        throw new errors_js_1.LibsqlUrlParseError(`This client does not support ${JSON.stringify(url.protocol)} URLs. ` +
            'Please use a "libsql:", "ws:" or "wss:" URL instead.');
    }
    if (url.username || url.password) {
        throw new errors_js_1.LibsqlUrlParseError("This client does not support HTTP Basic authentication with a username and password. " +
            'You can authenticate using a token passed in the "authToken" URL query parameter.');
    }
    if (url.hash) {
        throw new errors_js_1.LibsqlUrlParseError("URL fragments are not supported");
    }
    let hranaPath = url.pathname;
    if (hranaPath === "/") {
        hranaPath = "";
    }
    const hranaUrl = `${hranaScheme}//${url.host}${hranaPath}`;
    return { hranaUrl, authToken };
}
exports.parseLibsqlUrl = parseLibsqlUrl;
