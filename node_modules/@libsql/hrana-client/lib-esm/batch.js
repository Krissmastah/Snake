import { ProtoError } from "./errors.js";
import { stmtResultFromProto, rowsResultFromProto, rowResultFromProto, valueResultFromProto, errorFromProto, } from "./result.js";
import { stmtToProto } from "./stmt.js";
/** A builder for creating a batch and executing it on the server. */
export class Batch {
    #client;
    #streamState;
    #executed;
    /** @private */
    _steps;
    /** @private */
    _resultCallbacks;
    /** @private */
    constructor(client, streamState) {
        this.#client = client;
        this.#streamState = streamState;
        this.#executed = false;
        this._steps = [];
        this._resultCallbacks = [];
    }
    /** Return a builder for adding a step to the batch. */
    step() {
        return new BatchStep(this);
    }
    /** Execute the batch. */
    execute() {
        if (this.#executed) {
            throw new Error("The Batch has already been executed");
        }
        this.#executed = true;
        return new Promise((doneCallback, errorCallback) => {
            const request = {
                "type": "batch",
                "stream_id": this.#streamState.streamId,
                "batch": {
                    "steps": this._steps,
                },
            };
            const responseCallback = (response) => {
                const result = response["result"];
                for (const callback of this._resultCallbacks) {
                    callback(result);
                }
                doneCallback();
            };
            this.#client._sendStreamRequest(this.#streamState, request, { responseCallback, errorCallback });
        });
    }
}
/** A builder for adding a step to the batch. */
export class BatchStep {
    #batch;
    #conditions;
    /** @private */
    _index;
    /** @private */
    constructor(batch) {
        this.#batch = batch;
        this.#conditions = [];
        this._index = undefined;
    }
    /** Add the condition that needs to be satisfied to execute the statement. If you use this method multiple
    * times, we join them with a logical AND. */
    condition(cond) {
        this.#conditions.push(cond._proto);
        return this;
    }
    /** Add a statement that returns rows. */
    query(stmt) {
        return this.#add(stmtToProto(stmt, true), rowsResultFromProto);
    }
    /** Add a statement that returns at most a single row. */
    queryRow(stmt) {
        return this.#add(stmtToProto(stmt, true), rowResultFromProto);
    }
    /** Add a statement returns at most a single value. */
    queryValue(stmt) {
        return this.#add(stmtToProto(stmt, true), valueResultFromProto);
    }
    /** Add a statement without returning rows. */
    run(stmt) {
        return this.#add(stmtToProto(stmt, false), stmtResultFromProto);
    }
    #add(stmt, fromProto) {
        if (this._index !== undefined) {
            throw new Error("This step has already been added to the batch");
        }
        const index = this.#batch._steps.length;
        this._index = index;
        let condition;
        if (this.#conditions.length === 0) {
            condition = null;
        }
        else if (this.#conditions.length === 1) {
            condition = this.#conditions[0];
        }
        else {
            condition = { "type": "and", "conds": this.#conditions };
        }
        this.#batch._steps.push({
            "stmt": stmt,
            "condition": condition,
        });
        return new Promise((outputCallback, errorCallback) => {
            this.#batch._resultCallbacks.push((result) => {
                const stepResult = result["step_results"][index];
                const stepError = result["step_errors"][index];
                if (stepResult === undefined || stepError === undefined) {
                    errorCallback(new ProtoError("Server returned fewer step results than expected"));
                }
                else if (stepResult !== null && stepError !== null) {
                    errorCallback(new ProtoError("Server returned both result and error"));
                }
                else if (stepError !== null) {
                    errorCallback(errorFromProto(stepError));
                }
                else if (stepResult !== null) {
                    outputCallback(fromProto(stepResult));
                }
                else {
                    outputCallback(undefined);
                }
            });
        });
    }
}
export class BatchCond {
    /** @private */
    _proto;
    /** @private */
    constructor(proto) {
        this._proto = proto;
    }
    static ok(step) {
        return new BatchCond({ "type": "ok", "step": stepIndex(step) });
    }
    static error(step) {
        return new BatchCond({ "type": "error", "step": stepIndex(step) });
    }
    static not(cond) {
        return new BatchCond({ "type": "not", "cond": cond._proto });
    }
    static and(conds) {
        return new BatchCond({ "type": "and", "conds": conds.map(e => e._proto) });
    }
    static or(conds) {
        return new BatchCond({ "type": "or", "conds": conds.map(e => e._proto) });
    }
}
function stepIndex(step) {
    if (step._index === undefined) {
        throw new Error("Cannot add a condition referencing a step that has not been added to the batch");
    }
    return step._index;
}
