/// <reference types="ws" />
import { WebSocket } from "@libsql/isomorphic-ws";
import type * as proto from "./proto.js";
import { Sql } from "./sql.js";
import { Stream } from "./stream.js";
export type ProtocolVersion = 1 | 2;
export declare const protocolVersions: Map<string, ProtocolVersion>;
/** A client that talks to a SQL server using the Hrana protocol over a WebSocket. */
export declare class Client {
    #private;
    /** @private */
    constructor(socket: WebSocket, jwt: string | null);
    /** Get the protocol version negotiated with the server, possibly waiting until the socket is open. */
    getVersion(): Promise<ProtocolVersion>;
    /** @private */
    _ensureVersion(minVersion: ProtocolVersion, feature: string): void;
    /** @private */
    _sendRequest(request: proto.Request, callbacks: ResponseCallbacks): void;
    /** Open a {@link Stream}, a stream for executing SQL statements. */
    openStream(): Stream;
    /** @private */
    _closeStream(streamState: StreamState, error: Error): void;
    /** @private */
    _sendStreamRequest(streamState: StreamState, request: proto.Request, callbacks: ResponseCallbacks): void;
    /** Cache a SQL text on the server. This requires protocol version 2 or higher. */
    storeSql(sql: string): Sql;
    /** @private */
    _closeSql(sqlState: SqlState, error: Error): void;
    /** Close the client and the WebSocket. */
    close(): void;
    /** True if the client is closed. */
    get closed(): boolean;
}
export interface OpenCallbacks {
    openCallback: () => void;
    errorCallback: (_: Error) => void;
}
export interface ResponseCallbacks {
    responseCallback: (_: proto.Response) => void;
    errorCallback: (_: Error) => void;
}
export interface StreamState {
    streamId: number;
    closed: Error | undefined;
}
export interface SqlState {
    sqlId: number;
    closed: Error | undefined;
}
